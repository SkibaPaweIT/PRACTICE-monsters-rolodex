{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/SearchBox/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","Response","json","users","this","filterMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAKaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHbC,EAAW,SAACR,GAAD,OACpB,aADiC,CACjC,OAAKC,UAAU,YAAf,SACUD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACzB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLrBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOC,KAAK,SACZb,UAAU,SACVW,YAAaA,EAGbG,SAAUF,MC8CCG,E,kDAnDb,aAAc,IAAD,8BACX,gBAqBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SArBrC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJJ,E,qDAYb,WAAoB,IAAD,OAEjBI,MAAM,8CAELC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,OAE1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,Y,oBAY1C,WAAQ,MAIgCC,KAAKN,MAA/Bb,EAJN,EAIMA,SAAUU,EAJhB,EAIgBA,YACZU,EAAiBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAKA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAGnG,OACI,cADK,CACL,OAAK9B,UAAU,MAAf,UACA,oDACA,cAAC,EAAD,CACIW,YAAY,kBACZC,aAAce,KAAKf,eAEvB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA9CdI,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e89f26ea.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\n//URL PARAMETERS HERE\r\n//Props named monster is get from Card-List\r\nexport const Card = (props) => (\r\n    <div className=\"card-container\">\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img> \r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n        \r\n    </div>\r\n);","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from '../card/card.component';\r\n\r\n//Props is monster json \r\n//We have something like Props children and it's body of element we had before\r\nexport const CardList = (props) => ( //If u use => you don't need return. obvious asf\r\n    <div className=\"card-list\"> \r\n            { props.monsters.map(monster => (\r\n               <Card key={monster.id} monster={monster} /> //We get monster from monster list from props\r\n            ))} \r\n    </div>\r\n);","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\n\r\nexport const SearchBox = ({placeholder ,handleChange}) => (\r\n    <input type='search' \r\n    className='search'\r\n    placeholder={placeholder} \r\n    //it's still jsx btw\r\n    //setState is asynchronous. React gives us what should be done after the state change. as a second parameter for example console.log etc\r\n    onChange={handleChange}/> \r\n);","import React, {Component} from 'react';\r\nimport './App.css'; //Import css\r\nimport { CardList } from './components/card-list/card-list.component'\r\nimport {SearchBox } from './components/SearchBox/search-box.component'\r\nclass App extends Component { // Component gives us access to state \r\n  constructor(){ //super odnośi się do konstruktora klasy nadrzędnej czyli Component dlatego można state wrzucić\r\n    super(); \r\n    this.state = { \r\n      monsters: [],\r\n      searchField: ''\r\n    };  \r\n\r\n    //this.handleChange = this.handleChange.bind(this); //bind is method of any function. It's required to make it if created function\r\n    //isn't arrow function\r\n  }\r\n\r\n  //Lifecycle method \r\n  componentDidMount(){\r\n    //Getting thata from URL\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    //Getting Response to json\r\n    .then(Response => Response.json() \r\n    //Setting monster as users getted from json\r\n    .then(users => this.setState({monsters: users}))  \r\n    );\r\n  }\r\n\r\n  handleChange = (e) => { //arrow function binds to 'this' contex to place where they were defined \r\n    this.setState({searchField: e.target.value})\r\n  }\r\n\r\n\r\n  //()=> == annonymous function call\r\n  //{} stands for java script elements you can even {4+5} and this will work as well\r\n\r\n  render(){ //it's called everytime state is changed and in the beggining \r\n       \r\n        //eq to const monsters = this.state.monsters; \r\n        // const searchField = this.state.seachField\r\n        const { monsters, searchField } = this.state;\r\n        const filterMonsters = monsters.filter(monster =>  monster.name.toLowerCase().includes(searchField.toLowerCase())); \r\n        //toLowerCase to not to be case sensitive)\r\n\r\n        return ( //To jest jsx attribute a nie jakieś htmlelele     \r\n            <div className='App'>\r\n            <h1> Monsters Rolodex </h1>\r\n            <SearchBox \r\n                placeholder='Search Monsters'\r\n                handleChange={this.handleChange} //we don't need e=> cause of handleChange is referencing this e ?? \r\n                />\r\n            <CardList monsters={filterMonsters} />\r\n            </div>\r\n        );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}